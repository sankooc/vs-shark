use lazy_static::lazy_static;
use std::collections::HashMap;
lazy_static! {
	pub static ref link_type_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(0, "NULL");
		m.insert(1, "ETHERNET");
		m.insert(2, "EXP_ETHERNET");
		m.insert(3, "AX25");
		m.insert(4, "PRONET");
		m.insert(5, "CHAOS");
		m.insert(6, "IEEE802_5");
		m.insert(7, "ARCNET_BSD");
		m.insert(8, "SLIP");
		m.insert(9, "PPP");
		m.insert(10, "FDDI");
		m.insert(32, "DLT_REDBACK_SMARTEDGE");
		m.insert(50, "PPP_HDLC");
		m.insert(51, "PPP_ETHER");
		m.insert(99, "SYMANTEC_FIREWALL");
		m.insert(100, "ATM_RFC1483");
		m.insert(101, "RAW");
		m.insert(104, "C_HDLC");
		m.insert(105, "IEEE802_11");
		m.insert(106, "ATM_CLIP");
		m.insert(107, "FRELAY");
		m.insert(108, "LOOP");
		m.insert(109, "ENC");
		m.insert(112, "NETBSD_HDLC");
		m.insert(113, "LINUX_SLL");
		m.insert(114, "LTALK");
		m.insert(115, "DLT_ECONET");
		m.insert(116, "DLT_IPFILTER");
		m.insert(117, "PFLOG");
		m.insert(118, "DLT_CISCO_IOS");
		m.insert(119, "IEEE802_11_PRISM");
		m.insert(120, "DLT_AIRONET_HEADER");
		m.insert(122, "IP_OVER_FC");
		m.insert(123, "SUNATM");
		m.insert(124, "DLT_RIO");
		m.insert(125, "DLT_PCI_EXP");
		m.insert(126, "DLT_AURORA");
		m.insert(127, "IEEE802_11_RADIOTAP");
		m.insert(128, "TZSP");
		m.insert(129, "ARCNET_LINUX");
		m.insert(130, "JUNIPER_MLPPP");
		m.insert(131, "JUNIPER_MLFR");
		m.insert(132, "JUNIPER_ES");
		m.insert(133, "JUNIPER_GGSN");
		m.insert(134, "JUNIPER_MFR");
		m.insert(135, "JUNIPER_ATM2");
		m.insert(136, "JUNIPER_SERVICES");
		m.insert(137, "JUNIPER_ATM1");
		m.insert(138, "APPLE_IP_OVER_IEEE1394");
		m.insert(139, "MTP2_WITH_PHDR");
		m.insert(140, "MTP2");
		m.insert(141, "MTP3");
		m.insert(142, "SCCP");
		m.insert(143, "DOCSIS");
		m.insert(144, "LINUX_IRDA");
		m.insert(145, "IBM_SP");
		m.insert(146, "IBM_SN");
		m.insert(147, "USER0_USER15");
		m.insert(163, "IEEE802_11_AVS");
		m.insert(164, "JUNIPER_MONITOR");
		m.insert(165, "BACNET_MS_TP");
		m.insert(166, "PPP_PPPD");
		m.insert(167, "JUNIPER_PPPOE");
		m.insert(168, "JUNIPER_PPPOE_ATM");
		m.insert(169, "GPRS_LLC");
		m.insert(170, "GPF_T");
		m.insert(171, "GPF_F");
		m.insert(172, "GCOM_T1E1");
		m.insert(173, "GCOM_SERIAL");
		m.insert(174, "JUNIPER_PIC_PEER");
		m.insert(175, "ERF_ETH");
		m.insert(176, "ERF_POS");
		m.insert(177, "LINUX_LAPD");
		m.insert(178, "JUNIPER_ETHER");
		m.insert(179, "JUNIPER_PPP");
		m.insert(180, "JUNIPER_FRELAY");
		m.insert(181, "JUNIPER_CHDLC");
		m.insert(182, "MFR");
		m.insert(183, "JUNIPER_VP");
		m.insert(184, "A429");
		m.insert(185, "A653_ICM");
		m.insert(186, "USB_FREEBSD");
		m.insert(187, "BLUETOOTH_HCI_H4");
		m.insert(188, "IEEE802_16_MAC_CPS");
		m.insert(189, "USB_LINUX");
		m.insert(190, "CAN20B");
		m.insert(191, "IEEE802_15_4_LINUX");
		m.insert(192, "PPI");
		m.insert(193, "IEEE802_16_MAC_CPS_RADIO");
		m.insert(194, "JUNIPER_ISM");
		m.insert(195, "IEEE802_15_4_WITHFCS");
		m.insert(196, "SITA");
		m.insert(197, "ERF");
		m.insert(198, "RAIF1");
		m.insert(199, "IPMB_KONTRON");
		m.insert(200, "JUNIPER_ST");
		m.insert(201, "BLUETOOTH_HCI_H4_WITH_PHDR");
		m.insert(202, "AX25_KISS");
		m.insert(203, "LAPD");
		m.insert(204, "PPP_WITH_DIR");
		m.insert(205, "C_HDLC_WITH_DIR");
		m.insert(206, "FRELAY_WITH_DIR");
		m.insert(207, "LAPB_WITH_DIR");
		m.insert(209, "IPMB_LINUX");
		m.insert(210, "FLEXRAY");
		m.insert(211, "MOST");
		m.insert(212, "LIN");
		m.insert(213, "X2E_SERIAL");
		m.insert(214, "X2E_XORAYA");
		m.insert(215, "IEEE802_15_4_NONASK_PHY");
		m.insert(216, "LINUX_EVDEV");
		m.insert(217, "GSMTAP_UM");
		m.insert(218, "GSMTAP_ABIS");
		m.insert(219, "MPLS");
		m.insert(220, "USB_LINUX_MMAPPED");
		m.insert(221, "DECT");
		m.insert(222, "AOS");
		m.insert(223, "WIHART");
		m.insert(224, "FC_2");
		m.insert(225, "FC_2_WITH_FRAME_DELIMS");
		m.insert(226, "IPNET");
		m.insert(227, "CAN_SOCKETCAN");
		m.insert(228, "IPV4");
		m.insert(229, "IPV6");
		m.insert(230, "IEEE802_15_4_NOFCS");
		m.insert(231, "DBUS");
		m.insert(232, "JUNIPER_VS");
		m.insert(233, "JUNIPER_SRX_E2E");
		m.insert(234, "JUNIPER_FIBRECHANNEL");
		m.insert(235, "DVB_CI");
		m.insert(236, "MUX27010");
		m.insert(237, "STANAG_5066_D_PDU");
		m.insert(238, "JUNIPER_ATM_CEMIC");
		m.insert(239, "NFLOG");
		m.insert(240, "NETANALYZER");
		m.insert(241, "NETANALYZER_TRANSPARENT");
		m.insert(242, "IPOIB");
		m.insert(243, "MPEG_2_TS");
		m.insert(244, "NG40");
		m.insert(245, "NFC_LLCP");
		m.insert(246, "PFSYNC");
		m.insert(247, "INFINIBAND");
		m.insert(248, "SCTP");
		m.insert(249, "USBPCAP");
		m.insert(250, "RTAC_SERIAL");
		m.insert(251, "BLUETOOTH_LE_LL");
		m.insert(252, "WIRESHARK_UPPER_PDU");
		m.insert(253, "NETLINK");
		m.insert(254, "BLUETOOTH_LINUX_MONITOR");
		m.insert(255, "BLUETOOTH_BREDR_BB");
		m.insert(256, "BLUETOOTH_LE_LL_WITH_PHDR");
		m.insert(257, "PROFIBUS_DL");
		m.insert(258, "PKTAP");
		m.insert(259, "EPON");
		m.insert(260, "IPMI_HPM_2");
		m.insert(261, "ZWAVE_R1_R2");
		m.insert(262, "ZWAVE_R3");
		m.insert(263, "WATTSTOPPER_DLM");
		m.insert(264, "ISO_14443");
		m.insert(265, "RDS");
		m.insert(266, "USB_DARWIN");
		m.insert(267, "OPENFLOW");
		m.insert(268, "SDLC");
		m.insert(269, "TI_LLN_SNIFFER");
		m.insert(270, "LORATAP");
		m.insert(271, "VSOCK");
		m.insert(272, "NORDIC_BLE");
		m.insert(273, "DOCSIS31_XRA31");
		m.insert(274, "ETHERNET_MPACKET");
		m.insert(275, "DISPLAYPORT_AUX");
		m.insert(276, "LINUX_SLL2");
		m.insert(277, "SERCOS_MONITOR");
		m.insert(278, "OPENVIZSLA");
		m.insert(279, "EBHSCR");
		m.insert(280, "VPP_DISPATCH");
		m.insert(281, "DSA_TAG_BRCM");
		m.insert(282, "DSA_TAG_BRCM_PREPEND");
		m.insert(283, "IEEE802_15_4_TAP");
		m.insert(284, "DSA_TAG_DSA");
		m.insert(285, "DSA_TAG_EDSA");
		m.insert(286, "ELEE");
		m.insert(287, "Z_WAVE_SERIAL");
		m.insert(288, "USB_2_0");
		m.insert(289, "ATSC_ALP");
		m.insert(290, "ETW");
		m.insert(291, "NETANALYZER_NG");
		m.insert(292, "ZBOSS_NCP");
		m.insert(293, "USB_2_0_LOW_SPEED");
		m.insert(294, "USB_2_0_FULL_SPEED");
		m.insert(295, "USB_2_0_HIGH_SPEED");
		m.insert(296, "AUERSWALD_LOG");
		m.insert(297, "ZWAVE_TAP");
		m.insert(298, "SILABS_DEBUG_CHANNEL");
		m.insert(299, "FIRA_UCI");
		m.insert(300, "MDB");
		m.insert(301, "DECT_NR");
		m
	};
	pub static ref ip_protocol_type_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(0, "HOPOPT");
		m.insert(1, "ICMP");
		m.insert(2, "IGMP");
		m.insert(3, "GGP");
		m.insert(4, "IP-in-IP");
		m.insert(5, "ST");
		m.insert(6, "TCP");
		m.insert(7, "CBT");
		m.insert(8, "EGP");
		m.insert(9, "IGP");
		m.insert(10, "BBN-RCC-MON");
		m.insert(11, "NVP-II");
		m.insert(12, "PUP");
		m.insert(13, "ARGUS");
		m.insert(14, "EMCON");
		m.insert(15, "XNET");
		m.insert(16, "CHAOS");
		m.insert(17, "UDP");
		m.insert(18, "MUX");
		m.insert(19, "DCN-MEAS");
		m.insert(20, "HMP");
		m.insert(21, "PRM");
		m.insert(22, "XNS-IDP");
		m.insert(23, "TRUNK-1");
		m.insert(24, "TRUNK-2");
		m.insert(25, "LEAF-1");
		m.insert(26, "LEAF-2");
		m.insert(27, "RDP");
		m.insert(28, "IRTP");
		m.insert(29, "ISO-TP4");
		m.insert(30, "NETBLT");
		m.insert(31, "MFE-NSP");
		m.insert(32, "MERIT-INP");
		m.insert(33, "DCCP");
		m.insert(34, "3PC");
		m.insert(35, "IDPR");
		m.insert(36, "XTP");
		m.insert(37, "DDP");
		m.insert(38, "IDPR-CMTP");
		m.insert(39, "TP++");
		m.insert(40, "IL");
		m.insert(41, "IPv6");
		m.insert(42, "SDRP");
		m.insert(43, "IPv6-Route");
		m.insert(44, "IPv6-Frag");
		m.insert(45, "IDRP");
		m.insert(46, "RSVP");
		m.insert(47, "GRE");
		m.insert(48, "DSR");
		m.insert(49, "BNA");
		m.insert(50, "ESP");
		m.insert(51, "AH");
		m.insert(52, "I-NLSP");
		m.insert(53, "SwIPe");
		m.insert(54, "NARP");
		m.insert(55, "MOBILE");
		m.insert(56, "TLSP");
		m.insert(57, "SKIP");
		m.insert(58, "IPv6-ICMP");
		m.insert(59, "IPv6-NoNxt");
		m.insert(60, "IPv6-Opts");
		m.insert(61, "Any");
		m.insert(62, "CFTP");
		m.insert(63, "Any");
		m.insert(64, "SAT-EXPAK");
		m.insert(65, "KRYPTOLAN");
		m.insert(66, "RVD");
		m.insert(67, "IPPC");
		m.insert(68, "Any");
		m.insert(69, "SAT-MON");
		m.insert(70, "VISA");
		m.insert(71, "IPCU");
		m.insert(72, "CPNX");
		m.insert(73, "CPHB");
		m.insert(74, "WSN");
		m.insert(75, "PVP");
		m.insert(76, "BR-SAT-MON");
		m.insert(77, "SUN-ND");
		m.insert(78, "WB-MON");
		m.insert(79, "WB-EXPAK");
		m.insert(80, "ISO-IP");
		m.insert(81, "VMTP");
		m.insert(82, "SECURE-VMTP");
		m.insert(83, "VINES");
		m.insert(84, "TTP");
		m.insert(85, "NSFNET-IGP");
		m.insert(86, "DGP");
		m.insert(87, "TCF");
		m.insert(88, "EIGRP");
		m.insert(89, "OSPF");
		m.insert(90, "Sprite-RPC");
		m.insert(91, "LARP");
		m.insert(92, "MTP");
		m.insert(93, "AX.25");
		m.insert(94, "OS");
		m.insert(95, "MICP");
		m.insert(96, "SCC-SP");
		m.insert(97, "ETHERIP");
		m.insert(98, "ENCAP");
		m.insert(99, "Any");
		m.insert(100, "GMTP");
		m.insert(101, "IFMP");
		m.insert(102, "PNNI");
		m.insert(103, "PIM");
		m.insert(104, "ARIS");
		m.insert(105, "SCPS");
		m.insert(106, "QNX");
		m.insert(107, "A/N");
		m.insert(108, "IPComp");
		m.insert(109, "SNP");
		m.insert(110, "Compaq-Peer");
		m.insert(111, "IPX-in-IP");
		m.insert(112, "VRRP");
		m.insert(113, "PGM");
		m.insert(114, "Any");
		m.insert(115, "L2TP");
		m.insert(116, "DDX");
		m.insert(117, "IATP");
		m.insert(118, "STP");
		m.insert(119, "SRP");
		m.insert(120, "UTI");
		m.insert(121, "SMP");
		m.insert(122, "SM");
		m.insert(123, "PTP");
		m.insert(124, "IS-IS");
		m.insert(125, "FIRE");
		m.insert(126, "CRTP");
		m.insert(127, "CRUDP");
		m.insert(128, "SSCOPMCE");
		m.insert(129, "IPLT");
		m.insert(130, "SPS");
		m.insert(131, "PIPE");
		m.insert(132, "SCTP");
		m.insert(133, "FC");
		m.insert(134, "RSVP-E2E-IGNORE");
		m.insert(135, "Mobility");
		m.insert(136, "UDPLite");
		m.insert(137, "MPLS-in-IP");
		m.insert(138, "manet");
		m.insert(139, "HIP");
		m.insert(140, "Shim6");
		m.insert(141, "WESP");
		m.insert(142, "ROHC");
		m.insert(143, "Ethernet");
		m.insert(144, "AGGFRAG");
		m.insert(145, "NSH");
		m
	};
	pub static ref ssl_type_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(0, "Sent to us");
		m.insert(1, "Boardcast");
		m.insert(2, "Multicast not boardcast");
		m.insert(3, "Send to somebody else by somebody else");
		m.insert(4, "Send by us");
		m
	};
	pub static ref etype_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(2048, "IPv4");
		m.insert(2049, "X.75");
		m.insert(2053, "X.25 Level 3");
		m.insert(2054, "ARP");
		m.insert(2056, "Frame Relay ARP");
		m.insert(8947, "TRILL");
		m.insert(8948, "L2-IS-IS");
		m.insert(25944, "Trans Ether Bridging");
		m.insert(25945, "Raw Frame Relay");
		m.insert(32821, "RARP");
		m.insert(32923, "Appletalk");
		m.insert(33024, "802.1Q");
		m.insert(33079, "IPX/SPX");
		m.insert(33100, "SNMP");
		m.insert(34525, "IPv6");
		m.insert(34667, "TCP/IP Compression");
		m.insert(34668, "IP Autonomous Systems");
		m.insert(34669, "Secure Data");
		m.insert(34824, "IEEE Std 802.3 - Ethernet Passive Optical Network (EPON)");
		m.insert(34827, "PPP");
		m.insert(34828, "General Switch Management Protocol (GSMP)");
		m.insert(34887, "MPLS (multiprotocol label switching)");
		m.insert(34888, "MPLS with upstream-assigned label");
		m.insert(34915, "PPP over Ethernet (PPPoE) Discovery Stage");
		m.insert(34916, "PPP over Ethernet (PPPoE) Session Stage");
		m.insert(34958, "IEEE Std 802.1X - Port-based network access control");
		m.insert(34984, "IEEE Std 802.1Q - Service VLAN tag identifier (S-Tag)");
		m.insert(34999, "IEEE Std 802 - OUI Extended Ethertype");
		m.insert(35015, "IEEE Std 802.11 - Pre-Authentication (802.11i)");
		m.insert(35020, "IEEE Std 802.1AB - Link Layer Discovery Protocol (LLDP)");
		m.insert(35045, "IEEE Std 802.1AE - Media Access Control Security");
		m.insert(35061, "IEEE Std 802.1Q - Multiple VLAN Registration Protocol (MVRP)");
		m.insert(35062, "IEEE Std 802.1Q - Multiple Multicast Registration Protocol (MMRP)");
		m.insert(35131, "FGL");
		m.insert(35142, "TRILL RBridge Channel");
		m.insert(35130, "IEE 1905.1a");
		m.insert(35085, "TDLS");
		m
	};
	pub static ref tcp_option_kind_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(0, "End OF LIST");
		m.insert(1, "No Operation");
		m.insert(2, "Max segment size");
		m.insert(3, "Window scale");
		m.insert(4, "Selective Acknowledgement permitted");
		m.insert(5, "Selective ACKnowledgement SACK");
		m.insert(8, "echo of previous timestamp");
		m.insert(28, "User Timeout Option");
		m.insert(29, "TCP Authentication");
		m.insert(30, "MPTCP");
		m
	};
	pub static ref dns_class_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(1, "IN");
		m.insert(2, "CS");
		m.insert(3, "CH");
		m.insert(4, "HS");
		m
	};
	pub static ref dns_type_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(1, "A");
		m.insert(2, "NS");
		m.insert(3, "MD");
		m.insert(4, "MF");
		m.insert(5, "CNAME");
		m.insert(6, "SOA");
		m.insert(7, "MB");
		m.insert(8, "MG");
		m.insert(9, "MR");
		m.insert(10, "NULL");
		m.insert(11, "WKS");
		m.insert(12, "PTR");
		m.insert(13, "HINFO");
		m.insert(14, "MINFO");
		m.insert(15, "MX");
		m.insert(16, "TXT");
		m.insert(28, "AAAA");
		m
	};
	pub static ref arp_hardware_type_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(0, "Reserved");
		m.insert(1, "Ethernet (10Mb)");
		m.insert(2, "Experimental Ethernet (3Mb)");
		m.insert(3, "Amateur Radio AX.25");
		m.insert(4, "Proteon ProNET Token Ring");
		m.insert(5, "Chaos");
		m.insert(6, "IEEE 802 Networks");
		m.insert(7, "ARCNET");
		m.insert(8, "Hyperchannel");
		m.insert(9, "Lanstar");
		m.insert(10, "Autonet Short Address");
		m.insert(11, "LocalTalk");
		m.insert(12, "LocalNet (IBM PCNet or SYTEK LocalNET)");
		m.insert(13, "Ultra link");
		m.insert(14, "SMDS");
		m.insert(15, "Frame Relay");
		m.insert(16, "Asynchronous Transmission Mode (ATM)");
		m.insert(17, "HDLC");
		m.insert(18, "Fibre Channel");
		m.insert(19, "Asynchronous Transmission Mode (ATM)");
		m.insert(20, "Serial Line");
		m.insert(21, "Asynchronous Transmission Mode (ATM)");
		m.insert(22, "MIL-STD-188-220");
		m.insert(23, "Metricom");
		m.insert(24, "IEEE 1394.1995");
		m.insert(25, "MAPOS");
		m.insert(26, "Twinaxial");
		m.insert(27, "EUI-64");
		m.insert(28, "HIPARP");
		m.insert(29, "IP and ARP over ISO 7816-3");
		m.insert(30, "ARPSec");
		m.insert(31, "IPsec tunnel");
		m.insert(32, "InfiniBand (TM)");
		m.insert(33, "CAI");
		m.insert(34, "Wiegand Interface");
		m.insert(35, "Pure IP");
		m.insert(36, "HW_EXP1");
		m.insert(37, "HFI");
		m.insert(38, "Unified Bus (UB)");
		m.insert(256, "HW_EXP2");
		m.insert(257, "AEthernet");
		m.insert(65535, "Reserved");
		m
	};
	pub static ref arp_oper_type_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(1, "REQUEST");
		m.insert(2, "REPLY");
		m.insert(3, "request Reverse");
		m.insert(4, "reply Reverse");
		m.insert(5, "DRARP-Request");
		m.insert(6, "DRARP-Reply");
		m.insert(7, "DRARP-Error");
		m.insert(8, "InARP-Request");
		m.insert(9, "InARP-Reply");
		m.insert(10, "ARP-NAK");
		m.insert(11, "MARS-Request");
		m.insert(12, "MARS-Multi");
		m.insert(13, "MARS-MServ");
		m.insert(14, "MARS-Join");
		m.insert(15, "MARS-Leave");
		m.insert(16, "MARS-NAK");
		m.insert(17, "MARS-Unserv");
		m.insert(18, "MARS-SJoin");
		m.insert(19, "MARS-SLeave");
		m.insert(20, "MARS-Grouplist-Request");
		m.insert(21, "MARS-Grouplist-Reply");
		m.insert(22, "MARS-Redirect-Map");
		m.insert(23, "MAPOS-UNARP");
		m.insert(24, "OP_EXP1");
		m.insert(25, "OP_EXP2");
		m
	};
	pub static ref icmpv6_type_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(1, "Destination unreachable");
		m.insert(2, "Packet too big");
		m.insert(3, "Time exceeded");
		m.insert(4, "Parameter problem");
		m.insert(127, "Reserved for expansion of ICMPv6 error messages");
		m.insert(128, "Echo Request");
		m.insert(129, "Echo Reply");
		m.insert(130, "Multicast Listener Query");
		m.insert(131, "Multicast Listener Report");
		m.insert(132, "Multicast Listener Done");
		m.insert(133, "Router Solicitation");
		m.insert(134, "Router Advertisement");
		m.insert(135, "Neighbor Solicitation");
		m.insert(136, "Neighbor Advertisement");
		m.insert(137, "Redirect Message");
		m.insert(138, "Router Renumbering");
		m.insert(139, "ICMP Node Information Query");
		m.insert(140, "ICMP Node Information Response");
		m.insert(141, "Inverse Neighbor Discovery Solicitation Message	");
		m.insert(142, "Inverse Neighbor Discovery Advertisement Message");
		m.insert(143, "Multicast Listener Discovery");
		m.insert(144, "Home Agent Address Discovery Request Message	");
		m.insert(145, "Home Agent Address Discovery Reply Message");
		m.insert(146, "Mobile Prefix Solicitation");
		m.insert(147, "Mobile Prefix Advertisement");
		m.insert(148, "Certification Path Solicitation");
		m.insert(149, "Certification Path Advertisement");
		m.insert(151, "Multicast Router Advertisement");
		m
	};
	pub static ref dhcp_option_type_map: HashMap<u8, &'static str> = {
		let mut m = HashMap::new();
		m.insert(0, "Pad");
		m.insert(1, "Subnet");
		m.insert(2, "Time");
		m.insert(3, "Router");
		m.insert(4, "Time server");
		m.insert(5, "Name server");
		m.insert(6, "Domain name server");
		m.insert(7, "Log server");
		m.insert(8, "Cookie server");
		m.insert(9, "LPR Server");
		m.insert(10, "Impress server");
		m.insert(11, "Resource location server");
		m.insert(12, "Host");
		m.insert(13, "Boot file size");
		m.insert(14, "Merit dump file");
		m.insert(15, "Domain");
		m.insert(16, "Swap server");
		m.insert(17, "Root path");
		m.insert(18, "Extensions path");
		m.insert(19, "IP forwarding enable/disable");
		m.insert(20, "Non-local source routing enable/disable");
		m.insert(21, "Policy filter");
		m.insert(22, "Maximum datagram reassembly size");
		m.insert(23, "Default IP time-to-live");
		m.insert(24, "Path MTU aging timeout");
		m.insert(25, "Path MTU plateau table");
		m.insert(26, "Interface MTU");
		m.insert(27, "All subnets are local");
		m.insert(28, "Broadcast address");
		m.insert(29, "Perform mask discovery");
		m.insert(30, "Mask supplier");
		m.insert(31, "Perform router discovery");
		m.insert(32, "Router solicitation address");
		m.insert(33, "Static route");
		m.insert(34, "Trailer encapsulation option");
		m.insert(35, "ARP cache timeout");
		m.insert(36, "Ethernet encapsulation");
		m.insert(37, "TCP default TTL");
		m.insert(38, "TCP keepalive interval");
		m.insert(39, "TCP keepalive garbage");
		m.insert(40, "Network information service domain");
		m.insert(41, "Network information servers");
		m.insert(42, "Network Time Protocol (NTP) servers");
		m.insert(43, "Vendor-specific information");
		m.insert(44, "NetBIOS over TCP/IP name server");
		m.insert(45, "NetBIOS over TCP/IP datagram Distribution Server");
		m.insert(46, "NetBIOS over TCP/IP node type");
		m.insert(47, "NetBIOS over TCP/IP scope");
		m.insert(48, "X Window System font server");
		m.insert(49, "X Window System display manager");
		m.insert(50, "Requested IP address");
		m.insert(51, "IP address lease time");
		m.insert(52, "Option overload");
		m.insert(53, "DHCP message type");
		m.insert(54, "Server identifier");
		m.insert(55, "Parameter request list");
		m.insert(56, "Message");
		m.insert(57, "Maximum DHCP message size");
		m.insert(58, "Renewal (T1) time value");
		m.insert(59, "Rebinding (T2) time value");
		m.insert(60, "Vendor class identifier");
		m.insert(61, "Client identifier");
		m.insert(64, "Network Information Service+ domain");
		m.insert(65, "Network Information Service+ servers");
		m.insert(66, "TFTP server name");
		m.insert(67, "Bootfile name");
		m.insert(68, "Mobile IP home agent");
		m.insert(69, "Simple Mail Transfer Protocol (SMTP) server");
		m.insert(70, "Post Office Protocol (POP3) server");
		m.insert(71, "Network News Transfer Protocol (NNTP) server");
		m.insert(72, "Default World Wide Web (WWW) server");
		m.insert(73, "Default Finger protocol server");
		m.insert(74, "Default Internet Relay Chat (IRC) server");
		m.insert(75, "StreetTalk server");
		m.insert(76, "StreetTalk Directory Assistance (STDA) server");
		m.insert(255, "End");
		m
	};
	pub static ref dhcp_type_map: HashMap<u8, &'static str> = {
		let mut m = HashMap::new();
		m.insert(1, "DHCPDISCOVER");
		m.insert(2, "DHCPOFFER");
		m.insert(3, "DHCPREQUEST");
		m.insert(4, "DHCPDECLINE");
		m.insert(5, "DHCPACK");
		m.insert(6, "DHCPNAK");
		m.insert(7, "DHCPRELEASE");
		m.insert(8, "DHCPINFORM");
		m.insert(9, "DHCPFORCERENEW");
		m.insert(10, "DHCPLEASEQUERY");
		m.insert(11, "DHCPLEASEUNASSIGNED");
		m.insert(12, "DHCPLEASEUNKNOWN");
		m.insert(13, "DHCPLEASEACTIVE");
		m.insert(14, "DHCPBULKLEASEQUERY");
		m.insert(15, "DHCPLEASEQUERYDONE");
		m.insert(16, "DHCPACTIVELEASEQUERY");
		m.insert(17, "DHCPLEASEQUERYSTATUS");
		m.insert(18, "DHCPTL");
		m
	};
	pub static ref igmp_type_map: HashMap<u8, &'static str> = {
		let mut m = HashMap::new();
		m.insert(17, "Membership Query");
		m.insert(18, "IGMPv1 Membership Report");
		m.insert(22, "IGMPv2 Membership Report");
		m.insert(23, "Leave Group");
		m.insert(34, "IGMPv3 Membership Report");
		m
	};
	pub static ref tls_content_type_map: HashMap<u8, &'static str> = {
		let mut m = HashMap::new();
		m.insert(20, "ChangeCipherSpec");
		m.insert(21, "Alert");
		m.insert(22, "Handshake");
		m.insert(23, "Application");
		m.insert(24, "Heartbeat");
		m
	};
	pub static ref tls_min_type_map: HashMap<u8, &'static str> = {
		let mut m = HashMap::new();
		m.insert(0, "SSL 3.0");
		m.insert(1, "TLS 1.0");
		m.insert(2, "TLS 1.1");
		m.insert(3, "TLS 1.2");
		m.insert(4, "TLS 1.3");
		m
	};
	pub static ref tls_hs_message_type_map: HashMap<u8, &'static str> = {
		let mut m = HashMap::new();
		m.insert(0, "HelloRequest");
		m.insert(1, "ClientHello");
		m.insert(2, "ServerHello");
		m.insert(4, "NewSessionTicket");
		m.insert(8, "EncryptedExtensions");
		m.insert(11, "Certificate");
		m.insert(12, "ServerKeyExchange");
		m.insert(13, "CertificateRequest");
		m.insert(14, "ServerHelloDone");
		m.insert(15, "CertificateVerify");
		m.insert(16, "ClientKeyExchange");
		m.insert(20, "Finished");
		m
	};
	pub static ref tls_cipher_suites_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(0, "TLS_NULL_WITH_NULL_NULL");
		m.insert(255, "TLS_EMPTY_RENEGOTIATION_INFO_SCSV");
		m.insert(1, "TLS_RSA_WITH_NULL_MD5");
		m.insert(2, "TLS_RSA_WITH_NULL_SHA");
		m.insert(3, "TLS_RSA_EXPORT_WITH_RC4_40_MD5");
		m.insert(4, "TLS_RSA_WITH_RC4_128_MD5");
		m.insert(5, "TLS_RSA_WITH_RC4_128_SHA");
		m.insert(6, "TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5");
		m.insert(7, "TLS_RSA_WITH_IDEA_CBC_SHA");
		m.insert(8, "TLS_RSA_EXPORT_WITH_DES40_CBC_SHA");
		m.insert(9, "TLS_RSA_WITH_DES_CBC_SHA");
		m.insert(10, "TLS_RSA_WITH_3DES_EDE_CBC_SHA");
		m.insert(11, "TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA");
		m.insert(12, "TLS_DH_DSS_WITH_DES_CBC_SHA");
		m.insert(13, "TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA");
		m.insert(14, "TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA");
		m.insert(15, "TLS_DH_RSA_WITH_DES_CBC_SHA");
		m.insert(16, "TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA");
		m.insert(17, "TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA");
		m.insert(18, "TLS_DHE_DSS_WITH_DES_CBC_SHA");
		m.insert(19, "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA");
		m.insert(20, "TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA");
		m.insert(21, "TLS_DHE_RSA_WITH_DES_CBC_SHA");
		m.insert(22, "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA");
		m.insert(23, "TLS_DH_anon_EXPORT_WITH_RC4_40_MD5");
		m.insert(24, "TLS_DH_anon_WITH_RC4_128_MD5");
		m.insert(25, "TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA");
		m.insert(26, "TLS_DH_anon_WITH_DES_CBC_SHA");
		m.insert(27, "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA");
		m.insert(28, "SSL_FORTEZZA_KEA_WITH_NULL_SHA");
		m.insert(29, "SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA");
		m.insert(30, "TLS_KRB5_WITH_DES_CBC_SHA");
		m.insert(31, "TLS_KRB5_WITH_3DES_EDE_CBC_SHA");
		m.insert(32, "TLS_KRB5_WITH_RC4_128_SHA");
		m.insert(33, "TLS_KRB5_WITH_IDEA_CBC_SHA");
		m.insert(34, "TLS_KRB5_WITH_DES_CBC_MD5");
		m.insert(35, "TLS_KRB5_WITH_3DES_EDE_CBC_MD5");
		m.insert(36, "TLS_KRB5_WITH_RC4_128_MD5");
		m.insert(37, "TLS_KRB5_WITH_IDEA_CBC_MD5");
		m.insert(38, "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA");
		m.insert(39, "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA");
		m.insert(40, "TLS_KRB5_EXPORT_WITH_RC4_40_SHA");
		m.insert(41, "TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5");
		m.insert(42, "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5");
		m.insert(43, "TLS_KRB5_EXPORT_WITH_RC4_40_MD5");
		m.insert(44, "TLS_PSK_WITH_NULL_SHA");
		m.insert(45, "TLS_DHE_PSK_WITH_NULL_SHA");
		m.insert(46, "TLS_RSA_PSK_WITH_NULL_SHA");
		m.insert(47, "TLS_RSA_WITH_AES_128_CBC_SHA");
		m.insert(48, "TLS_DH_DSS_WITH_AES_128_CBC_SHA");
		m.insert(49, "TLS_DH_RSA_WITH_AES_128_CBC_SHA");
		m.insert(50, "TLS_DHE_DSS_WITH_AES_128_CBC_SHA");
		m.insert(51, "TLS_DHE_RSA_WITH_AES_128_CBC_SHA");
		m.insert(52, "TLS_DH_anon_WITH_AES_128_CBC_SHA");
		m.insert(53, "TLS_RSA_WITH_AES_256_CBC_SHA");
		m.insert(54, "TLS_DH_DSS_WITH_AES_256_CBC_SHA");
		m.insert(55, "TLS_DH_RSA_WITH_AES_256_CBC_SHA");
		m.insert(56, "TLS_DHE_DSS_WITH_AES_256_CBC_SHA");
		m.insert(57, "TLS_DHE_RSA_WITH_AES_256_CBC_SHA");
		m.insert(58, "TLS_DH_anon_WITH_AES_256_CBC_SHA");
		m.insert(59, "TLS_RSA_WITH_NULL_SHA256");
		m.insert(60, "TLS_RSA_WITH_AES_128_CBC_SHA256");
		m.insert(61, "TLS_RSA_WITH_AES_256_CBC_SHA256");
		m.insert(62, "TLS_DH_DSS_WITH_AES_128_CBC_SHA256");
		m.insert(63, "TLS_DH_RSA_WITH_AES_128_CBC_SHA256");
		m.insert(64, "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256");
		m.insert(65, "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA");
		m.insert(66, "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA");
		m.insert(67, "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA");
		m.insert(68, "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA");
		m.insert(69, "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA");
		m.insert(70, "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA");
		m.insert(96, "TLS_RSA_EXPORT1024_WITH_RC4_56_MD5");
		m.insert(97, "TLS_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5");
		m.insert(98, "TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA");
		m.insert(99, "TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA");
		m.insert(100, "TLS_RSA_EXPORT1024_WITH_RC4_56_SHA");
		m.insert(101, "TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA");
		m.insert(102, "TLS_DHE_DSS_WITH_RC4_128_SHA");
		m.insert(103, "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256");
		m.insert(104, "TLS_DH_DSS_WITH_AES_256_CBC_SHA256");
		m.insert(105, "TLS_DH_RSA_WITH_AES_256_CBC_SHA256");
		m.insert(106, "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256");
		m.insert(107, "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256");
		m.insert(108, "TLS_DH_anon_WITH_AES_128_CBC_SHA256");
		m.insert(109, "TLS_DH_anon_WITH_AES_256_CBC_SHA256");
		m.insert(128, "TLS_GOSTR341094_WITH_28147_CNT_IMIT");
		m.insert(129, "TLS_GOSTR341001_WITH_28147_CNT_IMIT");
		m.insert(130, "TLS_GOSTR341001_WITH_NULL_GOSTR3411");
		m.insert(131, "TLS_GOSTR341094_WITH_NULL_GOSTR3411");
		m.insert(132, "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA");
		m.insert(133, "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA");
		m.insert(134, "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA");
		m.insert(135, "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA");
		m.insert(136, "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA");
		m.insert(137, "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA");
		m.insert(138, "TLS_PSK_WITH_RC4_128_SHA");
		m.insert(139, "TLS_PSK_WITH_3DES_EDE_CBC_SHA");
		m.insert(140, "TLS_PSK_WITH_AES_128_CBC_SHA");
		m.insert(141, "TLS_PSK_WITH_AES_256_CBC_SHA");
		m.insert(142, "TLS_DHE_PSK_WITH_RC4_128_SHA");
		m.insert(143, "TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA");
		m.insert(144, "TLS_DHE_PSK_WITH_AES_128_CBC_SHA");
		m.insert(145, "TLS_DHE_PSK_WITH_AES_256_CBC_SHA");
		m.insert(146, "TLS_RSA_PSK_WITH_RC4_128_SHA");
		m.insert(147, "TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA");
		m.insert(148, "TLS_RSA_PSK_WITH_AES_128_CBC_SHA");
		m.insert(149, "TLS_RSA_PSK_WITH_AES_256_CBC_SHA");
		m.insert(150, "TLS_RSA_WITH_SEED_CBC_SHA");
		m.insert(151, "TLS_DH_DSS_WITH_SEED_CBC_SHA");
		m.insert(152, "TLS_DH_RSA_WITH_SEED_CBC_SHA");
		m.insert(153, "TLS_DHE_DSS_WITH_SEED_CBC_SHA");
		m.insert(154, "TLS_DHE_RSA_WITH_SEED_CBC_SHA");
		m.insert(155, "TLS_DH_anon_WITH_SEED_CBC_SHA");
		m.insert(156, "TLS_RSA_WITH_AES_128_GCM_SHA256");
		m.insert(157, "TLS_RSA_WITH_AES_256_GCM_SHA384");
		m.insert(158, "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256");
		m.insert(159, "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384");
		m.insert(160, "TLS_DH_RSA_WITH_AES_128_GCM_SHA256");
		m.insert(161, "TLS_DH_RSA_WITH_AES_256_GCM_SHA384");
		m.insert(162, "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256");
		m.insert(163, "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384");
		m.insert(164, "TLS_DH_DSS_WITH_AES_128_GCM_SHA256");
		m.insert(165, "TLS_DH_DSS_WITH_AES_256_GCM_SHA384");
		m.insert(166, "TLS_DH_anon_WITH_AES_128_GCM_SHA256");
		m.insert(167, "TLS_DH_anon_WITH_AES_256_GCM_SHA384");
		m.insert(186, "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(187, "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(188, "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(189, "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(190, "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(191, "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(22016, "TLS_EMPTY_RENEGOTIATION_INFO_SCSV");
		m.insert(4865, "TLS_AES_128_GCM_SHA256");
		m.insert(4866, "TLS_AES_256_GCM_SHA384");
		m.insert(4867, "TLS_CHACHA20_POLY1305_SHA256");
		m.insert(4868, "TLS_AES_128_CCM_SHA256");
		m.insert(4869, "TLS_AES_128_CCM_8_SHA256");
		m.insert(49153, "TLS_ECDH_ECDSA_WITH_NULL_SHA");
		m.insert(49154, "TLS_ECDH_ECDSA_WITH_RC4_128_SHA");
		m.insert(49155, "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA");
		m.insert(49156, "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA");
		m.insert(49157, "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA");
		m.insert(49158, "TLS_ECDHE_ECDSA_WITH_NULL_SHA");
		m.insert(49159, "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA");
		m.insert(49160, "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA");
		m.insert(49161, "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA");
		m.insert(49162, "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA");
		m.insert(49163, "TLS_ECDH_RSA_WITH_NULL_SHA");
		m.insert(49164, "TLS_ECDH_RSA_WITH_RC4_128_SHA");
		m.insert(49165, "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA");
		m.insert(49166, "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA");
		m.insert(49167, "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA");
		m.insert(49168, "TLS_ECDHE_RSA_WITH_NULL_SHA");
		m.insert(49169, "TLS_ECDHE_RSA_WITH_RC4_128_SHA");
		m.insert(49170, "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA");
		m.insert(49171, "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA");
		m.insert(49172, "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA");
		m.insert(49173, "TLS_ECDH_anon_WITH_NULL_SHA");
		m.insert(49174, "TLS_ECDH_anon_WITH_RC4_128_SHA");
		m.insert(49175, "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA");
		m.insert(49176, "TLS_ECDH_anon_WITH_AES_128_CBC_SHA");
		m.insert(49177, "TLS_ECDH_anon_WITH_AES_256_CBC_SHA");
		m.insert(49178, "TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA");
		m.insert(49179, "TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA");
		m.insert(49180, "TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA");
		m.insert(49181, "TLS_SRP_SHA_WITH_AES_128_CBC_SHA");
		m.insert(49182, "TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA");
		m.insert(49183, "TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA");
		m.insert(49184, "TLS_SRP_SHA_WITH_AES_256_CBC_SHA");
		m.insert(49185, "TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA");
		m.insert(49186, "TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA");
		m.insert(49187, "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256");
		m.insert(49188, "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384");
		m.insert(49189, "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256");
		m.insert(49190, "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384");
		m.insert(49191, "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256");
		m.insert(49192, "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384");
		m.insert(49193, "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256");
		m.insert(49194, "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384");
		m.insert(49195, "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256");
		m.insert(49196, "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
		m.insert(49197, "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256");
		m.insert(49198, "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384");
		m.insert(49199, "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
		m.insert(49200, "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
		m.insert(49201, "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256");
		m.insert(49202, "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384");
		m.insert(49203, "TLS_ECDHE_PSK_WITH_RC4_128_SHA");
		m.insert(49204, "TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA");
		m.insert(49205, "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA");
		m.insert(49206, "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA");
		m.insert(49207, "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256");
		m.insert(49208, "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384");
		m.insert(49209, "TLS_ECDHE_PSK_WITH_NULL_SHA");
		m.insert(49210, "TLS_ECDHE_PSK_WITH_NULL_SHA256");
		m.insert(49211, "TLS_ECDHE_PSK_WITH_NULL_SHA384");
		m.insert(49212, "TLS_RSA_WITH_ARIA_128_CBC_SHA256");
		m.insert(49213, "TLS_RSA_WITH_ARIA_256_CBC_SHA384");
		m.insert(49214, "TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256");
		m.insert(49215, "TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384");
		m.insert(49216, "TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256");
		m.insert(49217, "TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384");
		m.insert(49218, "TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256");
		m.insert(49219, "TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384");
		m.insert(49220, "TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256");
		m.insert(49221, "TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384");
		m.insert(49222, "TLS_DH_anon_WITH_ARIA_128_CBC_SHA256");
		m.insert(49223, "TLS_DH_anon_WITH_ARIA_256_CBC_SHA384");
		m.insert(49224, "TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256");
		m.insert(49225, "TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384");
		m.insert(49226, "TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256");
		m.insert(49227, "TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384");
		m.insert(49228, "TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256");
		m.insert(49229, "TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384");
		m.insert(49230, "TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256");
		m.insert(49231, "TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384");
		m.insert(49232, "TLS_RSA_WITH_ARIA_128_GCM_SHA256");
		m.insert(49233, "TLS_RSA_WITH_ARIA_256_GCM_SHA384");
		m.insert(49234, "TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256");
		m.insert(49235, "TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384");
		m.insert(49236, "TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256");
		m.insert(49237, "TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384");
		m.insert(49238, "TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256");
		m.insert(49239, "TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384");
		m.insert(49240, "TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256");
		m.insert(49241, "TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384");
		m.insert(49242, "TLS_DH_anon_WITH_ARIA_128_GCM_SHA256");
		m.insert(49243, "TLS_DH_anon_WITH_ARIA_256_GCM_SHA384");
		m.insert(49244, "TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256");
		m.insert(49245, "TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384");
		m.insert(49246, "TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256");
		m.insert(49247, "TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384");
		m.insert(49248, "TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256");
		m.insert(49249, "TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384");
		m.insert(49250, "TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256");
		m.insert(49251, "TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384");
		m.insert(49252, "TLS_PSK_WITH_ARIA_128_CBC_SHA256");
		m.insert(49253, "TLS_PSK_WITH_ARIA_256_CBC_SHA384");
		m.insert(49254, "TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256");
		m.insert(49255, "TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384");
		m.insert(49256, "TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256");
		m.insert(49257, "TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384");
		m.insert(49258, "TLS_PSK_WITH_ARIA_128_GCM_SHA256");
		m.insert(49259, "TLS_PSK_WITH_ARIA_256_GCM_SHA384");
		m.insert(49260, "TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256");
		m.insert(49261, "TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384");
		m.insert(49262, "TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256");
		m.insert(49263, "TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384");
		m.insert(49264, "TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256");
		m.insert(49265, "TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384");
		m.insert(49266, "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(49267, "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384");
		m.insert(49268, "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(49269, "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384");
		m.insert(49270, "TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(49271, "TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384");
		m.insert(49272, "TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(49273, "TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384");
		m.insert(49274, "TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49275, "TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49276, "TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49277, "TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49278, "TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49279, "TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49280, "TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49281, "TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49282, "TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49283, "TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49284, "TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49285, "TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49286, "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49287, "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49288, "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49289, "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49290, "TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49291, "TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49292, "TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49293, "TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49294, "TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49295, "TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49296, "TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49297, "TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49298, "TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256");
		m.insert(49299, "TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384");
		m.insert(49300, "TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(49301, "TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384");
		m.insert(49302, "TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(49303, "TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384");
		m.insert(49304, "TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(49305, "TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384");
		m.insert(49306, "TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256");
		m.insert(49307, "TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384");
		m.insert(49308, "TLS_RSA_WITH_AES_128_CCM");
		m.insert(49309, "TLS_RSA_WITH_AES_256_CCM");
		m.insert(49310, "TLS_DHE_RSA_WITH_AES_128_CCM");
		m.insert(49311, "TLS_DHE_RSA_WITH_AES_256_CCM");
		m.insert(49312, "TLS_RSA_WITH_AES_128_CCM_8");
		m.insert(49313, "TLS_RSA_WITH_AES_256_CCM_8");
		m.insert(49314, "TLS_DHE_RSA_WITH_AES_128_CCM_8");
		m.insert(49315, "TLS_DHE_RSA_WITH_AES_256_CCM_8");
		m.insert(49316, "TLS_PSK_WITH_AES_128_CCM");
		m.insert(49317, "TLS_PSK_WITH_AES_256_CCM");
		m.insert(49318, "TLS_DHE_PSK_WITH_AES_128_CCM");
		m.insert(49319, "TLS_DHE_PSK_WITH_AES_256_CCM");
		m.insert(49320, "TLS_PSK_WITH_AES_128_CCM_8");
		m.insert(49321, "TLS_PSK_WITH_AES_256_CCM_8");
		m.insert(49322, "TLS_PSK_DHE_WITH_AES_128_CCM_8");
		m.insert(49323, "TLS_PSK_DHE_WITH_AES_256_CCM_8");
		m.insert(49324, "TLS_ECDHE_ECDSA_WITH_AES_128_CCM");
		m.insert(49325, "TLS_ECDHE_ECDSA_WITH_AES_256_CCM");
		m.insert(49326, "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8");
		m.insert(49327, "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8");
		m.insert(52243, "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256_OLD");
		m.insert(52244, "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256_OLD");
		m.insert(52245, "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256_OLD");
		m.insert(52392, "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256");
		m.insert(52393, "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256");
		m.insert(52394, "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256");
		m.insert(52395, "TLS_PSK_WITH_CHACHA20_POLY1305_SHA256");
		m.insert(52396, "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256");
		m.insert(52397, "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256");
		m.insert(52398, "TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256");
		m.insert(65280, "TLS_GOSTR341094_RSA_WITH_28147_CNT_MD5");
		m.insert(65281, "TLS_RSA_WITH_28147_CNT_GOST94");
		m.insert(65278, "SSL_RSA_FIPS_WITH_DES_CBC_SHA");
		m.insert(65279, "SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA");
		m.insert(65248, "SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA");
		m.insert(65249, "SSL_RSA_FIPS_WITH_DES_CBC_SHA");
		m
	};
	pub static ref tls_extension_map: HashMap<u16, &'static str> = {
		let mut m = HashMap::new();
		m.insert(0, "server_name");
		m.insert(1, "max_fragment_length");
		m.insert(2, "client_certificate_url");
		m.insert(3, "trusted_ca_keys");
		m.insert(4, "truncated_hmac");
		m.insert(5, "status_request");
		m.insert(6, "user_mapping");
		m.insert(7, "client_authz");
		m.insert(8, "server_authz");
		m.insert(9, "cert_type");
		m.insert(10, "supported_groups");
		m.insert(11, "ec_point_formats");
		m.insert(12, "srp");
		m.insert(13, "signature_algorithms");
		m.insert(14, "use_srtp");
		m.insert(15, "heartbeat");
		m.insert(16, "application_layer_protocol_negotiation");
		m.insert(17, "status_request_v2");
		m.insert(18, "signed_certificate_timestamp");
		m.insert(19, "client_certificate_type");
		m.insert(20, "server_certificate_type");
		m.insert(21, "padding");
		m.insert(22, "encrypt_then_mac");
		m.insert(23, "extended_master_secret");
		m.insert(24, "token_binding");
		m.insert(25, "cached_info");
		m.insert(26, "tls_lts");
		m.insert(27, "compress_certificate");
		m.insert(28, "record_size_limit");
		m.insert(29, "pwd_protect");
		m.insert(30, "pwd_clear");
		m.insert(31, "password_salt");
		m.insert(32, "ticket_pinning");
		m.insert(33, "tls_cert_with_extern_psk");
		m.insert(34, "delegated_credential");
		m.insert(35, "session_ticket");
		m.insert(36, "TLMSP");
		m.insert(37, "TLMSP_proxying");
		m.insert(38, "TLMSP_delegate");
		m.insert(39, "supported_ekt_ciphers");
		m.insert(40, "Reserved");
		m.insert(41, "pre_shared_key");
		m.insert(42, "early_data");
		m.insert(43, "supported_versions");
		m.insert(44, "cookie");
		m.insert(45, "psk_key_exchange_modes");
		m.insert(46, "Reserved");
		m.insert(47, "certificate_authorities");
		m.insert(48, "oid_filters");
		m.insert(49, "post_handshake_auth");
		m.insert(50, "signature_algorithms_cert");
		m.insert(51, "key_share");
		m.insert(52, "transparency_info");
		m.insert(53, "connection_id");
		m.insert(54, "connection_id");
		m.insert(55, "external_id_hash");
		m.insert(56, "external_session_id");
		m.insert(57, "quic_transport_parameters");
		m.insert(58, "ticket_request");
		m.insert(59, "dnssec_chain");
		m.insert(60, "sequence_number_encryption_algorithms");
		m.insert(61, "rrc");
		m.insert(65281, "renegotiation_info");
		m
	};
}pub fn link_type_mapper(code:u16) -> String {
    (*link_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn ip_protocol_type_mapper(code:u16) -> String {
    (*ip_protocol_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn ssl_type_mapper(code:u16) -> String {
    (*ssl_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn etype_mapper(code:u16) -> String {
    (*etype_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn tcp_option_kind_mapper(code:u16) -> String {
    (*tcp_option_kind_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn dns_class_mapper(code:u16) -> String {
    (*dns_class_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn dns_type_mapper(code:u16) -> String {
    (*dns_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn arp_hardware_type_mapper(code:u16) -> String {
    (*arp_hardware_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn arp_oper_type_mapper(code:u16) -> String {
    (*arp_oper_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn icmpv6_type_mapper(code:u16) -> String {
    (*icmpv6_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn dhcp_option_type_mapper(code:u8) -> String {
    (*dhcp_option_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn dhcp_type_mapper(code:u8) -> String {
    (*dhcp_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn igmp_type_mapper(code:u8) -> String {
    (*igmp_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn tls_content_type_mapper(code:u8) -> String {
    (*tls_content_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn tls_min_type_mapper(code:u8) -> String {
    (*tls_min_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn tls_hs_message_type_mapper(code:u8) -> String {
    (*tls_hs_message_type_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn tls_cipher_suites_mapper(code:u16) -> String {
    (*tls_cipher_suites_map.get(&code).unwrap_or(&"unknown")).into()
  }
pub fn tls_extension_mapper(code:u16) -> String {
    (*tls_extension_map.get(&code).unwrap_or(&"unknown")).into()
  }